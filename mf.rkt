#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 54 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 7330 0 27 3 12 #"#lang racket"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 10 #"racket/gui"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 11 #"racket/draw"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 11 #"math/matrix"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 8 #"rackunit"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 7 #"srfi/29"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 47 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 17 3 9 #";syntaxes"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 18 #"define-syntax-rule"
0 0 23 3 2 #" ("
0 0 14 3 4 #"let1"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 3 #")) "
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 3 #"..."
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 18 #"define-syntax-rule"
0 0 23 3 2 #" ("
0 0 14 3 5 #"w/pen"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 2 #"  "
0 0 14 3 5 #"color"
0 0 23 3 1 #" "
0 0 14 3 4 #"size"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"let1"
0 0 23 3 1 #" "
0 0 14 3 3 #"pen"
0 0 23 3 2 #" ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 14 3 7 #"get-pen"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 14 3 7 #"set-pen"
0 0 23 3 2 #"  "
0 0 14 3 5 #"color"
0 0 23 3 1 #" "
0 0 14 3 4 #"size"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 3 #"..."
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 14 3 7 #"set-pen"
0 0 23 3 1 #" "
0 0 14 3 3 #"pen"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 18 #"define-syntax-rule"
0 0 23 3 2 #" ("
0 0 14 3 7 #"w/brush"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 14 3 4 #"size"
0 0 23 3 1 #" "
0 0 14 3 5 #"color"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"let1"
0 0 23 3 1 #" "
0 0 14 3 5 #"brush"
0 0 23 3 2 #" ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 14 3 7 #"get-pen"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 14 3 9 #"set-brush"
0 0 23 3 1 #" "
0 0 14 3 5 #"color"
0 0 23 3 1 #" "
0 0 14 3 4 #"size"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 3 #"..."
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 14 3 9 #"set-brush"
0 0 23 3 1 #" "
0 0 14 3 5 #"brush"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 40 #"; replace define with a memoized version"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 23 3 1 #" "
0 0 15 3 15 #"define-memoized"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 12 #"syntax-rules"
0 0 23 3 3 #" ()"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 1 #"_"
0 0 23 3 2 #" ("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 4 #"args"
0 0 23 3 1 #" "
0 0 14 3 3 #"..."
0 0 23 3 2 #") "
0 0 14 3 6 #"bodies"
0 0 23 3 1 #" "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 17 3 45 #"; store the cache as a hash of args => result"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (["
0 0 14 3 7 #"results"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-hash"
0 0 23 3 3 #")])"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 17 3 58
#"; need to do this to capture both the names and the values"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 4 #"args"
0 0 23 3 1 #" "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"           (("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 14 3 4 #"vals"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 17 3 47 #"; if we haven't calculated it before, do so now"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 15 3 4 #"when"
0 0 23 3 2 #" ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 13 #"hash-has-key?"
0 0 23 3 1 #" "
0 0 14 3 7 #"results"
0 0 23 3 1 #" "
0 0 14 3 4 #"vals"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 9 #"hash-set!"
0 0 23 3 1 #" "
0 0 14 3 7 #"results"
0 0 23 3 1 #" "
0 0 14 3 4 #"vals"
0 0 23 3 2 #" ("
0 0 15 3 5 #"begin"
0 0 23 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 23 3 1 #" "
0 0 14 3 3 #"..."
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 17 3 26 #"; return the cached result"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 8 #"hash-ref"
0 0 23 3 1 #" "
0 0 14 3 7 #"results"
0 0 23 3 1 #" "
0 0 14 3 4 #"vals"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 14 3 4 #"args"
0 0 23 3 1 #" "
0 0 14 3 3 #"..."
0 0 23 3 7 #"))))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 42 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 17 3 7 #"; utils"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"cycle-left-1"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 6 #"append"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"left-cycle-1"
0 0 23 3 1 #" "
0 0 14 3 12 #"cycle-left-1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"cycle-right-1"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 4 #"last"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 3 #") ("
0 0 14 3 10 #"drop-right"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 13 #"right-cycle-1"
0 0 23 3 1 #" "
0 0 14 3 12 #"cycle-left-1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"cycle-map"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 2 #" ("
0 0 14 3 12 #"cycle-left-1"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 3 #")  "
0 0 14 3 1 #"l"
0 0 23 3 3 #" ))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 15 #"cycle-map-minus"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"cycle-map"
0 0 23 3 1 #" "
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-cycle"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (["
0 0 14 3 2 #"ph"
0 0 23 3 2 #" ("
0 0 14 3 16 #"make-placeholder"
0 0 23 3 1 #" "
0 0 20 3 2 #"#f"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ["
0 0 14 3 1 #"x"
0 0 23 3 2 #" ("
0 0 14 3 6 #"append"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 2 #"ph"
0 0 23 3 4 #"))])"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 16 #"placeholder-set!"
0 0 23 3 1 #" "
0 0 14 3 2 #"ph"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 17 #"make-reader-graph"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 15 #"random-list-ref"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"let1"
0 0 23 3 1 #" "
0 0 14 3 3 #"len"
0 0 23 3 2 #" ("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #" ("
0 0 14 3 6 #"random"
0 0 23 3 1 #" "
0 0 14 3 3 #"len"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"-mod"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 6 #"angle1"
0 0 23 3 1 #" "
0 0 14 3 6 #"angle2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 14 3 1 #"-"
0 0 23 3 3 #" (("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #"("
0 0 14 3 1 #"_"
0 0 23 3 3 #") ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"_"
0 0 23 3 2 #" ("
0 0 14 3 5 #"floor"
0 0 23 3 1 #" "
0 0 14 3 1 #"_"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 3 #"1/2"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 6 #"angle1"
0 0 23 3 1 #" "
0 0 14 3 6 #"angle2"
0 0 23 3 2 #") "
0 0 14 3 1 #"x"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 20 3 3 #"1/2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 4 #"-mod"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 14 3 2 #"pi"
0 0 23 3 3 #") ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 4 #"0.75"
0 0 23 3 1 #" "
0 0 14 3 2 #"pi"
0 0 23 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 4 #"0.75"
0 0 23 3 1 #" "
0 0 14 3 2 #"pi"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"0.5"
0 0 23 3 1 #" "
0 0 14 3 2 #"pi"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 4 #"-mod"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 4 #"0.25"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 20 3 5 #"-0.25"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"minf"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 3 #"aux"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 1 #" "
0 0 14 3 3 #"res"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 3 #"res"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 6 #"valcar"
0 0 23 3 2 #" ("
0 0 14 3 1 #"f"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #"<"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 1 #" "
0 0 14 3 6 #"valcar"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 3 #"aux"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #") "
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 1 #" "
0 0 14 3 3 #"res"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 3 #"aux"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #") "
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 6 #"valcar"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"aux"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 20 3 6 #"+inf.0"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 4 #"()))"
0 0 23 29 1 #"\n"
0 0 17 3 48 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 17 3 7 #"; model"
0 0 23 29 1 #"\n"
0 0 17 3 6 #"; knot"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"struct"
0 0 23 3 1 #" "
0 0 14 3 9 #"path-node"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 1 #"z"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 10 #"chord-left"
0 0 23 3 1 #" "
0 0 17 3 40 #";  vector from previous node to this one"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 11 #"chord-right"
0 0 23 3 1 #" "
0 0 17 3 35 #"; vector from this node to next one"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 5 #"theta"
0 0 23 3 1 #" "
0 0 17 3 47 #"; angle from chord-right to (- control-right z)"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 3 #"phi"
0 0 23 3 1 #" "
0 0 17 3 47 #"; angle from (- z control-left) to (chord-left)"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 29 #";(equal? 0 (+ phi theta psi))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 52 #"; with psi turn angle from chord-left to chord-right"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 12 #"control-left"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 13 #"control-right"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 6 #"parent"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 22 3 9 #"#:mutable"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 22 3 13 #"#:transparent"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 15 #"path-node-angle"
0 0 23 3 1 #" "
0 0 14 3 2 #"pn"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"let1"
0 0 23 3 1 #" "
0 0 14 3 5 #"chord"
0 0 23 3 2 #" ("
0 0 14 3 21 #"path-node-chord-right"
0 0 23 3 1 #" "
0 0 14 3 2 #"pn"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 5 #"chord"
0 0 23 3 4 #")) ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 5 #"chord"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 5 #"angle"
0 0 23 3 1 #" "
0 0 14 3 5 #"chord"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 15 #"path-node-theta"
0 0 23 3 1 #" "
0 0 14 3 2 #"pn"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 5 #"angle"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 23 #"path-node-control-right"
0 0 23 3 1 #" "
0 0 14 3 2 #"pn"
0 0 23 3 3 #") ("
0 0 14 3 11 #"path-node-z"
0 0 23 3 1 #" "
0 0 14 3 2 #"pn"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 20 #"set-path-node-angle!"
0 0 23 3 1 #" "
0 0 14 3 2 #"pn"
0 0 23 3 1 #" "
0 0 14 3 9 #"angle-val"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 20 #"set-path-node-theta!"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 2 #"pn"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 9 #"angle-val"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 5 #"angle"
0 0 23 3 2 #" ("
0 0 14 3 21 #"path-node-chord-right"
0 0 23 3 1 #" "
0 0 14 3 2 #"pn"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 15 #"path-node-over?"
0 0 23 3 1 #" "
0 0 14 3 2 #"pn"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 14 3 2 #"pn"
0 0 23 3 2 #" ("
0 0 14 3 14 #"knot-node-over"
0 0 23 3 2 #" ("
0 0 14 3 16 #"path-node-parent"
0 0 23 3 1 #" "
0 0 14 3 2 #"pn"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 20 #"add-path-node-theta!"
0 0 23 3 1 #" "
0 0 14 3 2 #"pn"
0 0 23 3 1 #" "
0 0 14 3 7 #"d-theta"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 20 #"set-path-node-theta!"
0 0 23 3 1 #" "
0 0 14 3 2 #"pn"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 15 #"path-node-theta"
0 0 23 3 1 #" "
0 0 14 3 2 #"pn"
0 0 23 3 2 #") "
0 0 14 3 7 #"d-theta"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 14 #"path-node-next"
0 0 23 3 1 #" "
0 0 14 3 6 #"pn-cur"
0 0 23 3 1 #" "
0 0 14 3 3 #"pns"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"let1"
0 0 23 3 1 #" "
0 0 14 3 7 #"pns-cur"
0 0 23 3 2 #" ("
0 0 14 3 6 #"member"
0 0 23 3 1 #" "
0 0 14 3 6 #"pn-cur"
0 0 23 3 1 #" "
0 0 14 3 3 #"pns"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 7 #"pns-cur"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 4 #"cadr"
0 0 23 3 1 #" "
0 0 14 3 7 #"pns-cur"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 3 #"pns"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 20 #"path-node-copy-angle"
0 0 23 3 1 #" "
0 0 14 3 5 #"pn-to"
0 0 23 3 1 #" "
0 0 14 3 7 #"pn-from"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #" ("
0 0 14 3 21 #"path-node-chord-right"
0 0 23 3 1 #" "
0 0 14 3 5 #"pn-to"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 28 #"set-path-node-control-right!"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 14 3 5 #"pn-to"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 23 #"path-node-control-right"
0 0 23 3 1 #" "
0 0 14 3 7 #"pn-from"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 20 #"set-path-node-angle!"
0 0 23 3 1 #" "
0 0 14 3 5 #"pn-to"
0 0 23 3 2 #" ("
0 0 14 3 15 #"path-node-angle"
0 0 23 3 1 #" "
0 0 14 3 7 #"pn-from"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #" ("
0 0 14 3 20 #"path-node-chord-left"
0 0 23 3 1 #" "
0 0 14 3 5 #"pn-to"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 27 #"set-path-node-control-left!"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 14 3 5 #"pn-to"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 22 #"path-node-control-left"
0 0 23 3 1 #" "
0 0 14 3 7 #"pn-from"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 18 #"set-path-node-phi!"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 14 3 5 #"pn-to"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 5 #"angle"
0 0 23 3 2 #" ("
0 0 14 3 20 #"path-node-chord-left"
0 0 23 3 1 #" "
0 0 14 3 5 #"pn-to"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 15 #"path-node-angle"
0 0 23 3 1 #" "
0 0 14 3 7 #"pn-from"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 14 #"          ))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 29 #"fill-path-node-control-right!"
0 0 23 3 1 #" "
0 0 14 3 7 #"pnode-k"
0 0 23 3 1 #" "
0 0 14 3 9 #"pnode-k+1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 28 #"set-path-node-control-right!"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 7 #"pnode-k"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 19 #"right-control-point"
0 0 23 3 2 #" ("
0 0 14 3 11 #"path-node-z"
0 0 23 3 1 #" "
0 0 14 3 7 #"pnode-k"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 21 #"path-node-chord-right"
0 0 23 3 1 #" "
0 0 14 3 7 #"pnode-k"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 15 #"path-node-theta"
0 0 23 3 1 #" "
0 0 14 3 7 #"pnode-k"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 13 #"path-node-phi"
0 0 23 3 1 #" "
0 0 14 3 9 #"pnode-k+1"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 28 #"fill-path-node-control-left!"
0 0 23 3 1 #" "
0 0 14 3 7 #"pnode-k"
0 0 23 3 1 #" "
0 0 14 3 9 #"pnode-k+1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 27 #"set-path-node-control-left!"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 9 #"pnode-k+1"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 18 #"left-control-point"
0 0 23 3 2 #" ("
0 0 14 3 11 #"path-node-z"
0 0 23 3 1 #" "
0 0 14 3 9 #"pnode-k+1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 20 #"path-node-chord-left"
0 0 23 3 1 #" "
0 0 14 3 9 #"pnode-k+1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 15 #"path-node-theta"
0 0 23 3 1 #" "
0 0 14 3 7 #"pnode-k"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 13 #"path-node-phi"
0 0 23 3 1 #" "
0 0 14 3 9 #"pnode-k+1"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 30 #"fill-path-node-control-points!"
0 0 23 3 1 #" "
0 0 14 3 7 #"pnode-k"
0 0 23 3 1 #" "
0 0 14 3 9 #"pnode-k+1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 10 #"chord-left"
0 0 23 3 2 #" ("
0 0 14 3 20 #"path-node-chord-left"
0 0 23 3 1 #" "
0 0 14 3 9 #"pnode-k+1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 11 #"chord-right"
0 0 23 3 2 #" ("
0 0 14 3 21 #"path-node-chord-right"
0 0 23 3 1 #" "
0 0 14 3 7 #"pnode-k"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 4 #"when"
0 0 23 3 2 #" ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 10 #"chord-left"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 28 #"fill-path-node-control-left!"
0 0 23 3 1 #" "
0 0 14 3 7 #"pnode-k"
0 0 23 3 1 #" "
0 0 14 3 9 #"pnode-k+1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 4 #"when"
0 0 23 3 2 #" ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 11 #"chord-right"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 29 #"fill-path-node-control-right!"
0 0 23 3 1 #" "
0 0 14 3 7 #"pnode-k"
0 0 23 3 1 #" "
0 0 14 3 9 #"pnode-k+1"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"turnAngle"
0 0 23 3 1 #" "
0 0 14 3 6 #"chord1"
0 0 23 3 1 #" "
0 0 14 3 6 #"chord2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 2 #"or"
0 0 23 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 6 #"chord1"
0 0 23 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 6 #"chord2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 20 3 1 #"'"
0 0 23 3 2 #"()"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 4 #"-mod"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 14 3 2 #"pi"
0 0 23 3 3 #") ("
0 0 14 3 5 #"angle"
0 0 23 3 1 #" "
0 0 14 3 6 #"chord2"
0 0 23 3 3 #") ("
0 0 14 3 5 #"angle"
0 0 23 3 1 #" "
0 0 14 3 6 #"chord1"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 17 3 55 #"; I don't know which one is more efficient, this one or"
0 0 23 29 1 #"\n"
0 0 17 3 29 #";  (angle (/ chord2 chord1)))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 32 #"path-node-control-radius-average"
0 0 23 3 1 #" "
0 0 14 3 2 #"pn"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 1 #"/"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 9 #"magnitude"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 22 #"path-node-control-left"
0 0 23 3 1 #" "
0 0 14 3 2 #"pn"
0 0 23 3 3 #") ("
0 0 14 3 11 #"path-node-z"
0 0 23 3 1 #" "
0 0 14 3 2 #"pn"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 9 #"magnitude"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 23 #"path-node-control-right"
0 0 23 3 1 #" "
0 0 14 3 2 #"pn"
0 0 23 3 3 #") ("
0 0 14 3 11 #"path-node-z"
0 0 23 3 1 #" "
0 0 14 3 2 #"pn"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 20 3 1 #"2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 3 #";;;"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"struct"
0 0 23 3 1 #" "
0 0 14 3 9 #"knot-node"
0 0 23 3 2 #" ("
0 0 14 3 1 #"z"
0 0 23 3 1 #" "
0 0 14 3 15 #"first-path-node"
0 0 23 3 1 #" "
0 0 14 3 16 #"second-path-node"
0 0 23 3 1 #" "
0 0 14 3 4 #"over"
0 0 23 3 2 #") "
0 0 22 3 9 #"#:mutable"
0 0 23 3 1 #" "
0 0 22 3 13 #"#:transparent"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 20 #"knot-node-path-nodes"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 25 #"knot-node-first-path-node"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 3 #") ("
0 0 14 3 26 #"knot-node-second-path-node"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 17 3 42 #";(define (knot-node-other-path-node kn pn)"
0 0 23 29 1 #"\n"
0 0 17 3 42 #";  (findf (lambda (x) (not (equal? x pn)))"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";         (knot-node-path-nodes kn)))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 3 #"pns"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 2 #"kn"
0 0 23 3 2 #" ("
0 0 14 3 9 #"knot-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"z"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 3 #"pns"
0 0 23 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 23 3 1 #" "
0 0 14 3 3 #"pns"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 4 #"none"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 20 #"knot-node-path-nodes"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 17 3 16 #";  (check-equal?"
0 0 23 29 1 #"\n"
0 0 17 3 40 #";   (knot-node-other-path-node kn 2) 1))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 19 #"knot-node-copy-over"
0 0 23 3 1 #" "
0 0 14 3 5 #"kn-to"
0 0 23 3 1 #" "
0 0 14 3 7 #"kn-from"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 19 #"set-knot-node-over!"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 5 #"kn-to"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"none"
0 0 23 3 3 #"  ("
0 0 14 3 14 #"knot-node-over"
0 0 23 3 1 #" "
0 0 14 3 7 #"kn-from"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 20 3 1 #"'"
0 0 14 3 4 #"none"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 4 #"minf"
0 0 23 3 2 #" ("
0 0 14 3 20 #"knot-node-path-nodes"
0 0 23 3 1 #" "
0 0 14 3 5 #"kn-to"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 2 #"pn"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 3 #"abs"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 15 #"path-node-angle"
0 0 23 3 1 #" "
0 0 14 3 2 #"pn"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 15 #"path-node-angle"
0 0 23 3 2 #" ("
0 0 14 3 14 #"knot-node-over"
0 0 23 3 1 #" "
0 0 14 3 7 #"kn-from"
0 0 23 3 9 #")))))))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"tweak-angles"
0 0 23 3 1 #" "
0 0 14 3 6 #"angle1"
0 0 23 3 1 #" "
0 0 14 3 6 #"angle2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 49 #"; tweaks 2 angles so that they cross orthogonally"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 6 #"offset"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 6 #"angle2"
0 0 23 3 1 #" "
0 0 14 3 6 #"angle1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 13 #"target-offset"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 2 #"pi"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 1 #"*"
0 0 23 3 2 #" ("
0 0 14 3 5 #"floor"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 6 #"offset"
0 0 23 3 1 #" "
0 0 14 3 2 #"pi"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                              "
0 0 14 3 2 #"pi"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 1 #"/"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 6 #"offset"
0 0 23 3 1 #" "
0 0 14 3 13 #"target-offset"
0 0 23 3 2 #") "
0 0 20 3 1 #"2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 4 #"-1.4"
0 0 23 3 2 #" ("
0 0 14 3 12 #"tweak-angles"
0 0 23 3 1 #" "
0 0 20 3 4 #"-1.4"
0 0 23 3 1 #" "
0 0 20 3 3 #"1.4"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 2 #"pi"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 18 #"-1.450515964828205"
0 0 23 3 2 #" ("
0 0 14 3 12 #"tweak-angles"
0 0 23 3 1 #" "
0 0 20 3 18 #"-1.450515964828205"
0 0 23 3 1 #" "
0 0 20 3 17 #"1.450515964828205"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 2 #"pi"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 3 #"1.4"
0 0 23 3 2 #" ("
0 0 14 3 12 #"tweak-angles"
0 0 23 3 1 #" "
0 0 20 3 3 #"1.4"
0 0 23 3 1 #" "
0 0 20 3 4 #"-1.4"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 2 #"pi"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 1 #"<"
0 0 23 3 2 #" ("
0 0 14 3 12 #"tweak-angles"
0 0 23 3 1 #" "
0 0 20 3 19 #"-0.3345558925337896"
0 0 23 3 1 #" "
0 0 20 3 17 #"3.288158208922769"
0 0 23 3 3 #")  "
0 0 20 3 1 #"0"
0 0 23 3 2 #" )"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 20 3 5 #"#true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 23 #"knot-node-tweak-thetas!"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 3 #"pn1"
0 0 23 3 2 #" ("
0 0 14 3 25 #"knot-node-first-path-node"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 3 #"pn2"
0 0 23 3 2 #" ("
0 0 14 3 26 #"knot-node-second-path-node"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 5 #"tweak"
0 0 23 3 2 #" ("
0 0 14 3 12 #"tweak-angles"
0 0 23 3 3 #"  ("
0 0 14 3 15 #"path-node-angle"
0 0 23 3 1 #" "
0 0 14 3 3 #"pn1"
0 0 23 3 3 #") ("
0 0 14 3 15 #"path-node-angle"
0 0 23 3 1 #" "
0 0 14 3 3 #"pn2"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 20 #"add-path-node-theta!"
0 0 23 3 1 #" "
0 0 14 3 3 #"pn1"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 5 #"tweak"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 20 #"add-path-node-theta!"
0 0 23 3 1 #" "
0 0 14 3 3 #"pn2"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 5 #"tweak"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 25 #"knot-node-angle-path-node"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 1 #" "
0 0 14 3 5 #"angle"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 3 #"pn1"
0 0 23 3 2 #" ("
0 0 14 3 25 #"knot-node-first-path-node"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 6 #"angle1"
0 0 23 3 2 #" ("
0 0 14 3 15 #"path-node-angle"
0 0 23 3 1 #" "
0 0 14 3 3 #"pn1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 3 #"pn2"
0 0 23 3 2 #" ("
0 0 14 3 26 #"knot-node-second-path-node"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 6 #"angle2"
0 0 23 3 2 #" ("
0 0 14 3 15 #"path-node-angle"
0 0 23 3 1 #" "
0 0 14 3 3 #"pn2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #"<"
0 0 23 3 2 #" ("
0 0 14 3 3 #"abs"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cos"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 5 #"angle"
0 0 23 3 1 #" "
0 0 14 3 6 #"angle1"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 3 #"abs"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cos"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 5 #"angle"
0 0 23 3 1 #" "
0 0 14 3 6 #"angle2"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 3 #"pn2"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 3 #"pn1"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 20 #"knot-node-none-over?"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"none"
0 0 23 3 2 #" ("
0 0 14 3 14 #"knot-node-over"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 3 #";;;"
0 0 23 29 1 #"\n"
0 0 17 3 5 #";knot"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 24 #";knot drawing math utils"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";mf276"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"knot-matrix"
0 0 23 3 1 #" "
0 0 14 3 6 #"chords"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #" ("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 14 3 6 #"chords"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"prev"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 6 #"modulo"
0 0 23 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 2 #") "
0 0 14 3 1 #"n"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"next"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 6 #"modulo"
0 0 23 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 2 #") "
0 0 14 3 1 #"n"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #" "
0 0 14 3 1 #"j"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 23 3 1 #" "
0 0 14 3 1 #"j"
0 0 23 3 2 #" ("
0 0 14 3 4 #"prev"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 20 3 1 #"0"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #" ("
0 0 14 3 9 #"magnitude"
0 0 23 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 6 #"chords"
0 0 23 3 1 #" "
0 0 14 3 1 #"j"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 3 #"B+C"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #" "
0 0 14 3 1 #"j"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #" "
0 0 14 3 1 #"j"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 20 3 1 #"0"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #" ("
0 0 14 3 9 #"magnitude"
0 0 23 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 6 #"chords"
0 0 23 3 2 #" ("
0 0 14 3 4 #"prev"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #" ("
0 0 14 3 9 #"magnitude"
0 0 23 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 6 #"chords"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 1 #"D"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #" "
0 0 14 3 1 #"j"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 23 3 1 #" "
0 0 14 3 1 #"j"
0 0 23 3 2 #" ("
0 0 14 3 4 #"next"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 20 3 1 #"0"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #" ("
0 0 14 3 9 #"magnitude"
0 0 23 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 6 #"chords"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"build-matrix"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"i"
0 0 23 3 1 #" "
0 0 14 3 1 #"j"
0 0 23 3 3 #") ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #" "
0 0 14 3 1 #"j"
0 0 23 3 3 #") ("
0 0 14 3 3 #"B+C"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #" "
0 0 14 3 1 #"j"
0 0 23 3 3 #") ("
0 0 14 3 1 #"D"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #" "
0 0 14 3 1 #"j"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 17 #"knot-right-vector"
0 0 23 3 1 #" "
0 0 14 3 6 #"chords"
0 0 23 3 1 #" "
0 0 14 3 10 #"turnAngles"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #" ("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 14 3 6 #"chords"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"prev"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 6 #"modulo"
0 0 23 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 2 #") "
0 0 14 3 1 #"n"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"next"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 6 #"modulo"
0 0 23 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 2 #") "
0 0 14 3 1 #"n"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"build-matrix"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 14 3 6 #"chords"
0 0 23 3 2 #") "
0 0 20 3 1 #"1"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"i"
0 0 23 3 1 #" "
0 0 14 3 1 #"j"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 1 #"*"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #" ("
0 0 14 3 9 #"magnitude"
0 0 23 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 6 #"chords"
0 0 23 3 2 #" ("
0 0 14 3 4 #"prev"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 5 #")))) "
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 10 #"turnAngles"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 1 #"*"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #" ("
0 0 14 3 9 #"magnitude"
0 0 23 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 6 #"chords"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 4 #"))) "
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 10 #"turnAngles"
0 0 23 3 2 #" ("
0 0 14 3 4 #"next"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 7 #")))))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";mf116"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"velocity"
0 0 23 3 1 #" "
0 0 14 3 5 #"theta"
0 0 23 3 1 #" "
0 0 14 3 3 #"phi"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 2 #"ct"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cos"
0 0 23 3 1 #" "
0 0 14 3 5 #"theta"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 2 #"st"
0 0 23 3 2 #" ("
0 0 14 3 3 #"sin"
0 0 23 3 1 #" "
0 0 14 3 5 #"theta"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 2 #"cf"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cos"
0 0 23 3 1 #" "
0 0 14 3 3 #"phi"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 2 #"sf"
0 0 23 3 2 #" ("
0 0 14 3 3 #"sin"
0 0 23 3 1 #" "
0 0 14 3 3 #"phi"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 3 #"rt5"
0 0 23 3 2 #" ("
0 0 14 3 4 #"sqrt"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 3 #"min"
0 0 23 3 1 #" "
0 0 20 3 3 #"4.0"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 1 #"/"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 3 #"2.0"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 1 #"*"
0 0 23 3 2 #" ("
0 0 14 3 4 #"sqrt"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 2 #"st"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 2 #"sf"
0 0 23 3 1 #" "
0 0 20 3 2 #"16"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 2 #"sf"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 2 #"st"
0 0 23 3 1 #" "
0 0 20 3 2 #"16"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 2 #"ct"
0 0 23 3 1 #" "
0 0 14 3 2 #"cf"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"0.5"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 3 #"rt5"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 2 #"ct"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"0.5"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 14 3 3 #"rt5"
0 0 23 3 2 #") "
0 0 14 3 2 #"cf"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 19 #"right-control-point"
0 0 23 3 1 #" "
0 0 14 3 5 #"point"
0 0 23 3 1 #" "
0 0 14 3 5 #"chord"
0 0 23 3 1 #" "
0 0 14 3 5 #"theta"
0 0 23 3 1 #" "
0 0 14 3 3 #"phi"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 5 #"point"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 5 #"chord"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 10 #"make-polar"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 5 #"theta"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 1 #"/"
0 0 23 3 2 #" ("
0 0 14 3 8 #"velocity"
0 0 23 3 1 #" "
0 0 14 3 5 #"theta"
0 0 23 3 1 #" "
0 0 14 3 3 #"phi"
0 0 23 3 2 #") "
0 0 20 3 1 #"3"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 18 #"left-control-point"
0 0 23 3 1 #" "
0 0 14 3 5 #"point"
0 0 23 3 1 #" "
0 0 14 3 5 #"chord"
0 0 23 3 1 #" "
0 0 14 3 5 #"theta"
0 0 23 3 1 #" "
0 0 14 3 3 #"phi"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 5 #"point"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 5 #"chord"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 10 #"make-polar"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 3 #"phi"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 1 #"/"
0 0 23 3 2 #" ("
0 0 14 3 8 #"velocity"
0 0 23 3 1 #" "
0 0 14 3 3 #"phi"
0 0 23 3 1 #" "
0 0 14 3 5 #"theta"
0 0 23 3 2 #") "
0 0 20 3 1 #"3"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 19 #";knot graphic utils"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"z-path%"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"class"
0 0 23 3 1 #" "
0 0 14 3 8 #"dc-path%"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"z-curve-to"
0 0 23 3 1 #" "
0 0 14 3 2 #"z1"
0 0 23 3 1 #" "
0 0 14 3 2 #"z2"
0 0 23 3 1 #" "
0 0 14 3 2 #"z3"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 4 #"this"
0 0 23 3 1 #" "
0 0 14 3 8 #"curve-to"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 9 #"real-part"
0 0 23 3 1 #" "
0 0 14 3 2 #"z1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 9 #"imag-part"
0 0 23 3 1 #" "
0 0 14 3 2 #"z1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 9 #"real-part"
0 0 23 3 1 #" "
0 0 14 3 2 #"z2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 9 #"imag-part"
0 0 23 3 1 #" "
0 0 14 3 2 #"z2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 9 #"real-part"
0 0 23 3 1 #" "
0 0 14 3 2 #"z3"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 9 #"imag-part"
0 0 23 3 1 #" "
0 0 14 3 2 #"z3"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"z-move-to"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 4 #"this"
0 0 23 3 1 #" "
0 0 14 3 7 #"move-to"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 9 #"real-part"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 9 #"imag-part"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 6 #"public"
0 0 23 3 1 #" "
0 0 14 3 10 #"z-curve-to"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 6 #"public"
0 0 23 3 1 #" "
0 0 14 3 9 #"z-move-to"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 9 #"super-new"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"struct"
0 0 23 3 1 #" "
0 0 14 3 4 #"knot"
0 0 23 3 2 #" ("
0 0 14 3 10 #"knot-nodes"
0 0 23 3 1 #" "
0 0 14 3 10 #"path-nodes"
0 0 23 3 1 #" "
0 0 14 3 4 #"path"
0 0 23 3 3 #")  "
0 0 22 3 9 #"#:mutable"
0 0 23 3 1 #" "
0 0 22 3 13 #"#:transparent"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 15 #"make-naked-knot"
0 0 23 3 1 #" "
0 0 27 3 1 #"."
0 0 23 3 1 #" "
0 0 14 3 6 #"points"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 14 #"make-knot-node"
0 0 23 3 1 #" "
0 0 14 3 6 #"pnodes"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 6 #"pnodes"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 23 3 3 #"())"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 5 #"pnode"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 6 #"pnodes"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 1 #"z"
0 0 23 3 2 #" ("
0 0 14 3 11 #"path-node-z"
0 0 23 3 1 #" "
0 0 14 3 5 #"pnode"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 7 #"pnodes2"
0 0 23 3 2 #" ("
0 0 14 3 4 #"memf"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 2 #"pn"
0 0 23 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 2 #" ("
0 0 14 3 11 #"path-node-z"
0 0 23 3 1 #" "
0 0 14 3 2 #"pn"
0 0 23 3 5 #"))) ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 6 #"pnodes"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 5 #"knode"
0 0 23 3 2 #" ("
0 0 14 3 9 #"knot-node"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 1 #" "
0 0 14 3 5 #"pnode"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 7 #"pnodes2"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 4 #"none"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 21 #"set-path-node-parent!"
0 0 23 3 1 #" "
0 0 14 3 5 #"pnode"
0 0 23 3 1 #" "
0 0 14 3 5 #"knode"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 21 #"set-path-node-parent!"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 7 #"pnodes2"
0 0 23 3 2 #") "
0 0 14 3 5 #"knode"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 14 3 5 #"knode"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 17 3 35 #";  (define (make-knot-nodes pnodes)"
0 0 23 29 1 #"\n"
0 0 17 3 31 #";    (cond ((null? pnodes) '())"
0 0 23 29 1 #"\n"
0 0 17 3 57 #";          ((not (null? (path-node-parent (car pnodes))))"
0 0 23 29 1 #"\n"
0 0 17 3 43 #";           (make-knot-nodes (cdr pnodes)))"
0 0 23 29 1 #"\n"
0 0 17 3 24 #";          (else        "
0 0 23 29 1 #"\n"
0 0 17 3 42 #";           (cons (make-knot-node pnodes) "
0 0 23 29 1 #"\n"
0 0 17 3 52 #";                 (make-knot-nodes (cdr pnodes))))))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 15 #"make-knot-nodes"
0 0 23 3 1 #" "
0 0 14 3 6 #"pnodes"
0 0 23 3 1 #" "
0 0 14 3 6 #"knodes"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 6 #"pnodes"
0 0 23 3 2 #") "
0 0 14 3 6 #"knodes"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"          (("
0 0 14 3 5 #"findf"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 2 #"kn"
0 0 23 3 3 #") ("
0 0 14 3 6 #"member"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 6 #"pnodes"
0 0 23 3 3 #") ("
0 0 14 3 20 #"knot-node-path-nodes"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 14 3 6 #"knodes"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 15 #"make-knot-nodes"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 6 #"pnodes"
0 0 23 3 2 #") "
0 0 14 3 6 #"knodes"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 15 #"make-knot-nodes"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 6 #"pnodes"
0 0 23 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 14 #"make-knot-node"
0 0 23 3 1 #" "
0 0 14 3 6 #"pnodes"
0 0 23 3 2 #") "
0 0 14 3 6 #"knodes"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 10 #"path-nodes"
0 0 23 3 2 #" ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"z"
0 0 23 3 3 #") ("
0 0 14 3 9 #"path-node"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 3 #"() "
0 0 20 3 1 #"'"
0 0 23 3 3 #"() "
0 0 20 3 1 #"'"
0 0 23 3 3 #"() "
0 0 20 3 1 #"'"
0 0 23 3 3 #"() "
0 0 20 3 1 #"'"
0 0 23 3 3 #"() "
0 0 20 3 1 #"'"
0 0 23 3 3 #"() "
0 0 20 3 1 #"'"
0 0 23 3 4 #"()))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                     "
0 0 14 3 6 #"points"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 4 #"knot"
0 0 23 3 2 #" ("
0 0 14 3 15 #"make-knot-nodes"
0 0 23 3 1 #" "
0 0 14 3 10 #"path-nodes"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 4 #"()) "
0 0 14 3 10 #"path-nodes"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 5 #"())))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 27 #"; many things borrowed from"
0 0 23 29 1 #"\n"
0 0 17 3 92
(
 #"; http://hackage.haskell.org/package/cubicbezier-0.2.0/docs/Geom2D-C"
 #"ubicBezier-MetaPath.html"
) 0 0 23 29 1 #"\n"
0 0 17 3 54 #"; ftp://db.stanford.edu/pub/cstr/reports/cs/tr/85/1047"
0 0 23 29 1 #"\n"
0 0 17 3 58
#"; http://texdoc.net/texmf-dist/doc/generic/knuth/mf/mf.pdf"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-knot"
0 0 23 3 1 #" "
0 0 14 3 2 #"zs"
0 0 23 3 1 #" "
0 0 14 3 5 #"order"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 6 #"points"
0 0 23 3 2 #" ("
0 0 14 3 3 #"map"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"i"
0 0 23 3 3 #") ("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 2 #"zs"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 3 #")) "
0 0 14 3 5 #"order"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 1 #"k"
0 0 23 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 23 3 1 #" "
0 0 14 3 15 #"make-naked-knot"
0 0 23 3 1 #" "
0 0 14 3 6 #"points"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 6 #"chords"
0 0 23 3 2 #" ("
0 0 14 3 15 #"cycle-map-minus"
0 0 23 3 1 #" "
0 0 14 3 6 #"points"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 10 #"turnAngles"
0 0 23 3 2 #" ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 9 #"turnAngle"
0 0 23 3 2 #" ("
0 0 14 3 13 #"cycle-right-1"
0 0 23 3 1 #" "
0 0 14 3 6 #"chords"
0 0 23 3 2 #") "
0 0 14 3 6 #"chords"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 11 #"orig-thetas"
0 0 23 3 2 #" ("
0 0 14 3 12 #"matrix->list"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 12 #"matrix-solve"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 11 #"knot-matrix"
0 0 23 3 1 #" "
0 0 14 3 6 #"chords"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 17 #"knot-right-vector"
0 0 23 3 1 #" "
0 0 14 3 6 #"chords"
0 0 23 3 1 #" "
0 0 14 3 10 #"turnAngles"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 6 #"pnodes"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-path-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 26 #"set-path-node-chord-right!"
0 0 23 3 1 #" "
0 0 14 3 6 #"pnodes"
0 0 23 3 1 #" "
0 0 14 3 6 #"chords"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 25 #"set-path-node-chord-left!"
0 0 23 3 1 #" "
0 0 14 3 6 #"pnodes"
0 0 23 3 2 #" ("
0 0 14 3 13 #"cycle-right-1"
0 0 23 3 1 #" "
0 0 14 3 6 #"chords"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 20 #"set-path-node-theta!"
0 0 23 3 1 #" "
0 0 14 3 6 #"pnodes"
0 0 23 3 1 #" "
0 0 14 3 11 #"orig-thetas"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 23 #"knot-node-tweak-thetas!"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-knot-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 15 #"knot-fill-phis!"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #" "
0 0 14 3 10 #"turnAngles"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 30 #"fill-path-node-control-points!"
0 0 23 3 1 #" "
0 0 14 3 6 #"pnodes"
0 0 23 3 2 #" ("
0 0 14 3 12 #"cycle-left-1"
0 0 23 3 1 #" "
0 0 14 3 6 #"pnodes"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 15 #"knot-fill-path!"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 14 3 1 #"k"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-fill-phis!"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #" "
0 0 14 3 10 #"turnAngles"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 5 #"pnode"
0 0 23 3 1 #" "
0 0 14 3 9 #"turnAngle"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 14 3 18 #"set-path-node-phi!"
0 0 23 3 1 #" "
0 0 14 3 5 #"pnode"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #" ("
0 0 14 3 15 #"path-node-theta"
0 0 23 3 1 #" "
0 0 14 3 5 #"pnode"
0 0 23 3 2 #") "
0 0 14 3 9 #"turnAngle"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 15 #"knot-path-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 10 #"turnAngles"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-fill-path!"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 6 #"z-path"
0 0 23 3 2 #" ("
0 0 14 3 3 #"new"
0 0 23 3 1 #" "
0 0 14 3 7 #"z-path%"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 6 #"pnodes"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-path-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 6 #"z-path"
0 0 23 3 1 #" "
0 0 14 3 9 #"z-move-to"
0 0 23 3 2 #" ("
0 0 14 3 11 #"path-node-z"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-path-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 3 #"for"
0 0 23 3 3 #" (["
0 0 14 3 7 #"pnode-k"
0 0 23 3 1 #" "
0 0 14 3 6 #"pnodes"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ["
0 0 14 3 9 #"pnode-k+1"
0 0 23 3 2 #" ("
0 0 14 3 12 #"left-cycle-1"
0 0 23 3 1 #" "
0 0 14 3 6 #"pnodes"
0 0 23 3 3 #")])"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 6 #"z-path"
0 0 23 3 1 #" "
0 0 14 3 10 #"z-curve-to"
0 0 23 3 2 #" ("
0 0 14 3 23 #"path-node-control-right"
0 0 23 3 1 #" "
0 0 14 3 7 #"pnode-k"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 22 #"path-node-control-left"
0 0 23 3 1 #" "
0 0 14 3 9 #"pnode-k+1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 11 #"path-node-z"
0 0 23 3 1 #" "
0 0 14 3 9 #"pnode-k+1"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 14 #"set-knot-path!"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #" "
0 0 14 3 6 #"z-path"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"knot-draw"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 3 #"pen"
0 0 23 3 2 #" ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 14 3 7 #"get-pen"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 14 3 7 #"set-pen"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 14 3 9 #"draw-path"
0 0 23 3 2 #" ("
0 0 14 3 9 #"knot-path"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 3 #"for"
0 0 23 3 3 #" (["
0 0 14 3 5 #"knode"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-knot-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 3 #")])"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 15 3 4 #"when"
0 0 23 3 2 #" ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"none"
0 0 23 3 2 #" ("
0 0 14 3 14 #"knot-node-over"
0 0 23 3 1 #" "
0 0 14 3 5 #"knode"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 5 #"pnode"
0 0 23 3 2 #" ("
0 0 14 3 14 #"knot-node-over"
0 0 23 3 1 #" "
0 0 14 3 5 #"knode"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 1 #"z"
0 0 23 3 2 #" ("
0 0 14 3 11 #"path-node-z"
0 0 23 3 1 #" "
0 0 14 3 5 #"pnode"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 7 #"z-angle"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-polar"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #" ("
0 0 14 3 15 #"path-node-angle"
0 0 23 3 1 #" "
0 0 14 3 5 #"pnode"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 14 3 7 #"set-pen"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"white\""
0 0 23 3 1 #" "
0 0 20 3 2 #"15"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 11 #"draw-z-line"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 14 3 7 #"z-angle"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 14 3 7 #"set-pen"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 11 #"draw-z-line"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 14 3 7 #"z-angle"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 14 3 7 #"set-pen"
0 0 23 3 1 #" "
0 0 14 3 3 #"pen"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 17 #"knot-nearest-node"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 5 #"aknot"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 7 #"nearest"
0 0 23 3 2 #" ("
0 0 14 3 4 #"minf"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 15 #"knot-knot-nodes"
0 0 23 3 1 #" "
0 0 14 3 5 #"aknot"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 6 #"k-node"
0 0 23 3 3 #") ("
0 0 14 3 9 #"magnitude"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 11 #"knot-node-z"
0 0 23 3 1 #" "
0 0 14 3 6 #"k-node"
0 0 23 3 3 #") ("
0 0 14 3 16 #"make-rectangular"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 7 #")))))))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 23 3 2 #" ("
0 0 14 3 14 #"knot-node-over"
0 0 23 3 1 #" "
0 0 14 3 7 #"nearest"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 4 #"none"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 7 #"nearest"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 20 3 1 #"'"
0 0 23 3 5 #"())))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 1 #"k"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"make-knot"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 8 #"100+200i"
0 0 23 3 1 #" "
0 0 20 3 8 #"200+100i"
0 0 23 3 1 #" "
0 0 20 3 8 #"200+300i"
0 0 23 3 1 #" "
0 0 20 3 8 #"300+200i"
0 0 23 3 1 #" "
0 0 20 3 8 #"400+100i"
0 0 23 3 1 #" "
0 0 20 3 8 #"400+300i"
0 0 23 3 1 #" "
0 0 20 3 8 #"500+200i"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                       "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 10 #"kn100+200i"
0 0 23 3 2 #" ("
0 0 14 3 5 #"findf"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 2 #"kn"
0 0 23 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 23 3 2 #" ("
0 0 14 3 11 #"knot-node-z"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 2 #") "
0 0 20 3 8 #"100+200i"
0 0 23 3 4 #")) ("
0 0 14 3 15 #"knot-knot-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 17 #"knot-nearest-node"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 14 3 1 #"k"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 10 #"kn100+200i"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 19 #"set-knot-node-over!"
0 0 23 3 1 #" "
0 0 14 3 10 #"kn100+200i"
0 0 23 3 2 #" ("
0 0 14 3 25 #"knot-node-first-path-node"
0 0 23 3 1 #" "
0 0 14 3 10 #"kn100+200i"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 17 #"knot-nearest-node"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 14 3 1 #"k"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 20 3 1 #"'"
0 0 23 3 4 #"()))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-game-over?"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 20 3 2 #"#f"
0 0 23 3 2 #" ("
0 0 14 3 5 #"findf"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 2 #"kn"
0 0 23 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 23 3 2 #" ("
0 0 14 3 14 #"knot-node-over"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 4 #"none"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 15 #"knot-knot-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 7 #"knot-8?"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #" ("
0 0 14 3 6 #"length"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-knot-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 16 #"knot-detect-loop"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 6 #"pnodes"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-path-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 5 #"findf"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"pns"
0 0 23 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 23 3 2 #" ("
0 0 14 3 16 #"path-node-parent"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 3 #"pns"
0 0 23 3 4 #")) ("
0 0 14 3 16 #"path-node-parent"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 23 3 1 #" "
0 0 14 3 3 #"pns"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 6 #"pnodes"
0 0 23 3 2 #" ("
0 0 14 3 12 #"cycle-left-1"
0 0 23 3 1 #" "
0 0 14 3 6 #"pnodes"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 26 #"knot-detect-loop-knot-node"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 6 #"knodes"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-knot-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 6 #"pnodes"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-path-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 5 #"findf"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 2 #"kn"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 2 #"or"
0 0 23 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 23 3 2 #" ("
0 0 14 3 14 #"path-node-next"
0 0 23 3 2 #" ("
0 0 14 3 25 #"knot-node-first-path-node"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 2 #") "
0 0 14 3 6 #"pnodes"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 26 #"knot-node-second-path-node"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 6 #"equal?"
0 0 23 3 2 #" ("
0 0 14 3 14 #"path-node-next"
0 0 23 3 2 #" ("
0 0 14 3 26 #"knot-node-second-path-node"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 2 #") "
0 0 14 3 6 #"pnodes"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 25 #"knot-node-first-path-node"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 14 3 6 #"knodes"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 21 #"knot-detect-pattern-2"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 6 #"pnodes"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-path-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 9 #"pns-found"
0 0 23 3 2 #" ("
0 0 14 3 5 #"findf"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"pns"
0 0 23 3 3 #") ("
0 0 14 3 20 #"path-node-pattern-2?"
0 0 23 3 1 #" "
0 0 14 3 3 #"pns"
0 0 23 3 1 #" "
0 0 14 3 6 #"pnodes"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 6 #"pnodes"
0 0 23 3 2 #" ("
0 0 14 3 12 #"cycle-left-1"
0 0 23 3 1 #" "
0 0 14 3 6 #"pnodes"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 3 #"not"
0 0 23 3 1 #" "
0 0 14 3 9 #"pns-found"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 20 3 2 #"#f"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 20 #"path-node-pattern-2?"
0 0 23 3 1 #" "
0 0 14 3 9 #"pns-found"
0 0 23 3 1 #" "
0 0 14 3 6 #"pnodes"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 32 #"knot-detect-pattern-2-knot-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 6 #"knodes"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-knot-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 6 #"pnodes"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-path-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 9 #"kns-found"
0 0 23 3 2 #" ("
0 0 14 3 5 #"findf"
0 0 23 3 1 #" "
0 0 14 3 20 #"knot-node-pattern-2?"
0 0 23 3 1 #" "
0 0 14 3 6 #"knodes"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 14 3 9 #"kns-found"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 20 #"knot-node-pattern-2?"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 20 3 1 #"'"
0 0 23 3 3 #"())"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 20 #"path-node-pattern-2?"
0 0 23 3 1 #" "
0 0 14 3 6 #"pn1pn2"
0 0 23 3 1 #" "
0 0 14 3 3 #"pns"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 3 #"pn1"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 6 #"pn1pn2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 3 #"pn2"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 23 3 1 #" "
0 0 14 3 6 #"pn1pn2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 3 #"kn1"
0 0 23 3 2 #" ("
0 0 14 3 16 #"path-node-parent"
0 0 23 3 1 #" "
0 0 14 3 3 #"pn1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 3 #"kn2"
0 0 23 3 2 #" ("
0 0 14 3 16 #"path-node-parent"
0 0 23 3 1 #" "
0 0 14 3 3 #"pn2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 4 #"pn11"
0 0 23 3 2 #" ("
0 0 14 3 25 #"knot-node-first-path-node"
0 0 23 3 1 #" "
0 0 14 3 3 #"kn1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 4 #"pn12"
0 0 23 3 2 #" ("
0 0 14 3 26 #"knot-node-second-path-node"
0 0 23 3 1 #" "
0 0 14 3 3 #"kn1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 4 #"pn21"
0 0 23 3 2 #" ("
0 0 14 3 25 #"knot-node-first-path-node"
0 0 23 3 1 #" "
0 0 14 3 3 #"kn2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 4 #"pn22"
0 0 23 3 2 #" ("
0 0 14 3 26 #"knot-node-second-path-node"
0 0 23 3 1 #" "
0 0 14 3 3 #"kn2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 8 #"kn1-over"
0 0 23 3 2 #" ("
0 0 14 3 14 #"knot-node-over"
0 0 23 3 1 #" "
0 0 14 3 3 #"kn1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 8 #"kn2-over"
0 0 23 3 2 #" ("
0 0 14 3 14 #"knot-node-over"
0 0 23 3 1 #" "
0 0 14 3 3 #"kn2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 14 3 8 #"kn1-over"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"none"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 14 3 8 #"kn2-over"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"none"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 6 #"equal?"
0 0 23 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 14 3 8 #"kn1-over"
0 0 23 3 1 #" "
0 0 14 3 3 #"pn1"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 14 3 8 #"kn2-over"
0 0 23 3 1 #" "
0 0 14 3 3 #"pn2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 17 3 59
#";TODO: find and elegant way to use a combinatorics function"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 17 3 39 #"; maybe all these tests are not usefull"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 2 #"or"
0 0 23 3 2 #" ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 23 3 2 #" ("
0 0 14 3 14 #"path-node-next"
0 0 23 3 1 #" "
0 0 14 3 4 #"pn11"
0 0 23 3 1 #" "
0 0 14 3 3 #"pns"
0 0 23 3 2 #") "
0 0 14 3 4 #"pn21"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 6 #"equal?"
0 0 23 3 2 #" ("
0 0 14 3 14 #"path-node-next"
0 0 23 3 1 #" "
0 0 14 3 4 #"pn12"
0 0 23 3 1 #" "
0 0 14 3 3 #"pns"
0 0 23 3 2 #") "
0 0 14 3 4 #"pn22"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 23 3 2 #" ("
0 0 14 3 14 #"path-node-next"
0 0 23 3 1 #" "
0 0 14 3 4 #"pn11"
0 0 23 3 1 #" "
0 0 14 3 3 #"pns"
0 0 23 3 2 #") "
0 0 14 3 4 #"pn21"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 6 #"equal?"
0 0 23 3 2 #" ("
0 0 14 3 14 #"path-node-next"
0 0 23 3 1 #" "
0 0 14 3 4 #"pn22"
0 0 23 3 1 #" "
0 0 14 3 3 #"pns"
0 0 23 3 2 #") "
0 0 14 3 4 #"pn12"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 23 3 2 #" ("
0 0 14 3 14 #"path-node-next"
0 0 23 3 1 #" "
0 0 14 3 4 #"pn21"
0 0 23 3 1 #" "
0 0 14 3 3 #"pns"
0 0 23 3 2 #") "
0 0 14 3 4 #"pn11"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 6 #"equal?"
0 0 23 3 2 #" ("
0 0 14 3 14 #"path-node-next"
0 0 23 3 1 #" "
0 0 14 3 4 #"pn12"
0 0 23 3 1 #" "
0 0 14 3 3 #"pns"
0 0 23 3 2 #") "
0 0 14 3 4 #"pn22"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 23 3 2 #" ("
0 0 14 3 14 #"path-node-next"
0 0 23 3 1 #" "
0 0 14 3 4 #"pn21"
0 0 23 3 1 #" "
0 0 14 3 3 #"pns"
0 0 23 3 2 #") "
0 0 14 3 4 #"pn11"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 6 #"equal?"
0 0 23 3 2 #" ("
0 0 14 3 14 #"path-node-next"
0 0 23 3 1 #" "
0 0 14 3 4 #"pn22"
0 0 23 3 1 #" "
0 0 14 3 3 #"pns"
0 0 23 3 2 #") "
0 0 14 3 4 #"pn12"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 23 3 2 #" ("
0 0 14 3 14 #"path-node-next"
0 0 23 3 1 #" "
0 0 14 3 4 #"pn11"
0 0 23 3 1 #" "
0 0 14 3 3 #"pns"
0 0 23 3 2 #") "
0 0 14 3 4 #"pn22"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 6 #"equal?"
0 0 23 3 2 #" ("
0 0 14 3 14 #"path-node-next"
0 0 23 3 1 #" "
0 0 14 3 4 #"pn12"
0 0 23 3 1 #" "
0 0 14 3 3 #"pns"
0 0 23 3 2 #") "
0 0 14 3 4 #"pn21"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 23 3 2 #" ("
0 0 14 3 14 #"path-node-next"
0 0 23 3 1 #" "
0 0 14 3 4 #"pn11"
0 0 23 3 1 #" "
0 0 14 3 3 #"pns"
0 0 23 3 2 #") "
0 0 14 3 4 #"pn22"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 6 #"equal?"
0 0 23 3 2 #" ("
0 0 14 3 14 #"path-node-next"
0 0 23 3 1 #" "
0 0 14 3 4 #"pn21"
0 0 23 3 1 #" "
0 0 14 3 3 #"pns"
0 0 23 3 2 #") "
0 0 14 3 4 #"pn12"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 23 3 2 #" ("
0 0 14 3 14 #"path-node-next"
0 0 23 3 1 #" "
0 0 14 3 4 #"pn22"
0 0 23 3 1 #" "
0 0 14 3 3 #"pns"
0 0 23 3 2 #") "
0 0 14 3 4 #"pn11"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 6 #"equal?"
0 0 23 3 2 #" ("
0 0 14 3 14 #"path-node-next"
0 0 23 3 1 #" "
0 0 14 3 4 #"pn12"
0 0 23 3 1 #" "
0 0 14 3 3 #"pns"
0 0 23 3 2 #") "
0 0 14 3 4 #"pn21"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 23 3 2 #" ("
0 0 14 3 14 #"path-node-next"
0 0 23 3 1 #" "
0 0 14 3 4 #"pn22"
0 0 23 3 1 #" "
0 0 14 3 3 #"pns"
0 0 23 3 2 #") "
0 0 14 3 4 #"pn11"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 6 #"equal?"
0 0 23 3 2 #" ("
0 0 14 3 14 #"path-node-next"
0 0 23 3 1 #" "
0 0 14 3 4 #"pn21"
0 0 23 3 1 #" "
0 0 14 3 3 #"pns"
0 0 23 3 2 #") "
0 0 14 3 4 #"pn12"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 4 #"pn11"
0 0 23 3 1 #" "
0 0 14 3 4 #"pn21"
0 0 23 3 1 #" "
0 0 14 3 4 #"pn12"
0 0 23 3 1 #" "
0 0 14 3 4 #"pn22"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 20 3 2 #"#f"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 19 #"knot-remove-pattern"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #" "
0 0 14 3 7 #"pattern"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 6 #"pnodes"
0 0 23 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 2 #"pn"
0 0 23 3 3 #") ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 6 #"member"
0 0 23 3 1 #" "
0 0 14 3 2 #"pn"
0 0 23 3 1 #" "
0 0 14 3 7 #"pattern"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 15 #"knot-path-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 6 #"knodes"
0 0 23 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 2 #"kn"
0 0 23 3 3 #") ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 6 #"member"
0 0 23 3 2 #" ("
0 0 14 3 14 #"knot-node-over"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 2 #") "
0 0 14 3 7 #"pattern"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 15 #"knot-knot-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 6 #"points"
0 0 23 3 2 #" ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 11 #"path-node-z"
0 0 23 3 1 #" "
0 0 14 3 6 #"pnodes"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 6 #"chords"
0 0 23 3 2 #" ("
0 0 14 3 15 #"cycle-map-minus"
0 0 23 3 1 #" "
0 0 14 3 6 #"points"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 3 #"res"
0 0 23 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 23 3 1 #" "
0 0 14 3 15 #"make-naked-knot"
0 0 23 3 1 #" "
0 0 14 3 6 #"points"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 10 #"res-pnodes"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-path-nodes"
0 0 23 3 1 #" "
0 0 14 3 3 #"res"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 26 #"set-path-node-chord-right!"
0 0 23 3 1 #" "
0 0 14 3 10 #"res-pnodes"
0 0 23 3 1 #" "
0 0 14 3 6 #"chords"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 25 #"set-path-node-chord-left!"
0 0 23 3 1 #" "
0 0 14 3 10 #"res-pnodes"
0 0 23 3 2 #" ("
0 0 14 3 13 #"cycle-right-1"
0 0 23 3 1 #" "
0 0 14 3 6 #"chords"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 20 #"path-node-copy-angle"
0 0 23 3 1 #" "
0 0 14 3 10 #"res-pnodes"
0 0 23 3 1 #" "
0 0 14 3 6 #"pnodes"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 19 #"knot-node-copy-over"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 15 #"knot-knot-nodes"
0 0 23 3 1 #" "
0 0 14 3 3 #"res"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 14 3 6 #"knodes"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 30 #"fill-path-node-control-points!"
0 0 23 3 1 #" "
0 0 14 3 10 #"res-pnodes"
0 0 23 3 2 #" ("
0 0 14 3 12 #"cycle-left-1"
0 0 23 3 1 #" "
0 0 14 3 10 #"res-pnodes"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 15 #"knot-fill-path!"
0 0 23 3 1 #" "
0 0 14 3 3 #"res"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 14 3 3 #"res"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 22 #";(define (knot-copy k)"
0 0 23 29 1 #"\n"
0 0 17 3 74
(
 #";  (let1 res (apply make-naked-knot (map path-node-z (knot-path-node"
 #"s k)))"
) 0 0 23 29 1 #"\n"
0 0 17 3 33 #";        (map knot-node-copy-over"
0 0 23 29 1 #"\n"
0 0 17 3 35 #";             (knot-knot-nodes res)"
0 0 23 29 1 #"\n"
0 0 17 3 34 #";             (knot-knot-nodes k))"
0 0 23 29 1 #"\n"
0 0 17 3 14 #";        res))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"knot-copy"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 3 #"pns"
0 0 23 3 2 #" ("
0 0 14 3 3 #"map"
0 0 23 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 23 3 2 #" ("
0 0 14 3 2 #"pn"
0 0 23 3 3 #") ("
0 0 14 3 11 #"struct-copy"
0 0 23 3 1 #" "
0 0 14 3 9 #"path-node"
0 0 23 3 1 #" "
0 0 14 3 2 #"pn"
0 0 23 3 2 #" ["
0 0 14 3 6 #"parent"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 5 #"()]))"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 15 #"knot-path-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 6 #"al-pns"
0 0 23 3 2 #" ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-path-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 2 #") "
0 0 14 3 3 #"pns"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 5 #"f-pns"
0 0 23 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 23 3 2 #" ("
0 0 14 3 2 #"pn"
0 0 23 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 23 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 23 3 1 #" "
0 0 14 3 2 #"pn"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 4 #"none"
0 0 23 3 1 #" "
0 0 27 3 1 #"."
0 0 23 3 1 #" "
0 0 14 3 4 #"none"
0 0 23 3 2 #") "
0 0 14 3 6 #"al-pns"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 3 #"kns"
0 0 23 3 2 #" ("
0 0 14 3 3 #"map"
0 0 23 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 23 3 2 #" ("
0 0 14 3 2 #"kn"
0 0 23 3 3 #") ("
0 0 14 3 11 #"struct-copy"
0 0 23 3 1 #" "
0 0 14 3 9 #"knot-node"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                        ["
0 0 14 3 15 #"first-path-node"
0 0 23 3 2 #" ("
0 0 14 3 5 #"f-pns"
0 0 23 3 2 #" ("
0 0 14 3 25 #"knot-node-first-path-node"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                        ["
0 0 14 3 16 #"second-path-node"
0 0 23 3 2 #" ("
0 0 14 3 5 #"f-pns"
0 0 23 3 2 #" ("
0 0 14 3 26 #"knot-node-second-path-node"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                        ["
0 0 14 3 4 #"over"
0 0 23 3 2 #" ("
0 0 14 3 5 #"f-pns"
0 0 23 3 2 #" ("
0 0 14 3 14 #"knot-node-over"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 5 #"))]))"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 15 #"knot-knot-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 6 #"al-kns"
0 0 23 3 2 #" ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-knot-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 2 #") "
0 0 14 3 3 #"kns"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 23 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 23 3 2 #" ("
0 0 14 3 7 #"pn-pair"
0 0 23 3 3 #") ("
0 0 14 3 21 #"set-path-node-parent!"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 7 #"pn-pair"
0 0 23 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 23 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 23 3 2 #" ("
0 0 14 3 16 #"path-node-parent"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 7 #"pn-pair"
0 0 23 3 3 #")) "
0 0 14 3 6 #"al-kns"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 14 3 6 #"al-pns"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 4 #"knot"
0 0 23 3 1 #" "
0 0 14 3 3 #"kns"
0 0 23 3 1 #" "
0 0 14 3 3 #"pns"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 5 #"())))"
0 0 23 29 1 #"\n"
0 0 23 3 40 #"                                        "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-play-first"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"knot-play"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 1 #" "
0 0 14 3 25 #"knot-node-first-path-node"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 16 #"knot-play-second"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"knot-play"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 1 #" "
0 0 14 3 26 #"knot-node-second-path-node"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"knot-play"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 3 #"res"
0 0 23 3 2 #" ("
0 0 14 3 9 #"knot-copy"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 1 #"z"
0 0 23 3 2 #" ("
0 0 14 3 11 #"knot-node-z"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 6 #"res-kn"
0 0 23 3 2 #" ("
0 0 14 3 17 #"knot-nearest-node"
0 0 23 3 2 #" ("
0 0 14 3 9 #"real-part"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 3 #") ("
0 0 14 3 9 #"imag-part"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 2 #") "
0 0 14 3 3 #"res"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 19 #"set-knot-node-over!"
0 0 23 3 1 #" "
0 0 14 3 6 #"res-kn"
0 0 23 3 2 #" ("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 6 #"res-kn"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 14 3 3 #"res"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 7 #"knot-0?"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 7 #"knot-8?"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 20 3 2 #"#t"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 4 #"let1"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 2 #" ("
0 0 14 3 16 #"knot-detect-loop"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 7 #"knot-0?"
0 0 23 3 2 #" ("
0 0 14 3 19 #"knot-remove-pattern"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 4 #"let1"
0 0 23 3 1 #" "
0 0 14 3 2 #"p2"
0 0 23 3 2 #" ("
0 0 14 3 21 #"knot-detect-pattern-2"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 14 3 2 #"p2"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 14 3 7 #"knot-0?"
0 0 23 3 2 #" ("
0 0 14 3 19 #"knot-remove-pattern"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #" "
0 0 14 3 2 #"p2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                          "
0 0 20 3 2 #"#f"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";(define z1 100+200i)"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";(define z2 200+100i)"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";(define z3 200+300i)"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";(define z4 300+200i)"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";(define z5 400+100i)"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";(define z6 400+300i)"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";(define z7 500+200i)"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 31 #";(define (knot-fill-chords! k) "
0 0 23 29 1 #"\n"
0 0 17 3 38 #";  (let* ((pnodes (knot-path-nodes k))"
0 0 23 29 1 #"\n"
0 0 17 3 39 #";         (zs (map path-node-z pnodes))"
0 0 23 29 1 #"\n"
0 0 17 3 40 #";         (chords (cycle-map-minus zs)))"
0 0 23 29 1 #"\n"
0 0 17 3 51 #";    (map set-path-node-chord-right! pnodes chords)"
0 0 23 29 1 #"\n"
0 0 17 3 68
#";    (map set-path-node-chord-left! pnodes (cycle-right-1 chords))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"*knot*"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"make-knot"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 8 #"100+200i"
0 0 23 3 1 #" "
0 0 20 3 8 #"200+100i"
0 0 23 3 1 #" "
0 0 20 3 8 #"200+300i"
0 0 23 3 1 #" "
0 0 20 3 8 #"300+200i"
0 0 23 3 1 #" "
0 0 20 3 8 #"400+100i"
0 0 23 3 1 #" "
0 0 20 3 8 #"400+300i"
0 0 23 3 1 #" "
0 0 20 3 8 #"500+200i"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 15 #"make-shadow-7-4"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"make-knot"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 8 #"100+200i"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 20 3 8 #"200+100i"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 20 3 8 #"200+300i"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 20 3 8 #"300+200i"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 20 3 8 #"400+100i"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 20 3 8 #"400+300i"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 20 3 8 #"500+200i"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 19 #"make-shadow-trefoil"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"make-knot"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"list"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 20 3 8 #"200+100i"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 20 3 8 #"400+100i"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 8 #"300+100i"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"1/2"
0 0 23 3 2 #" ("
0 0 14 3 4 #"sqrt"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 2 #") "
0 0 20 3 6 #"0+200i"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"make-shadow-4"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"make-knot"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 8 #"200+200i"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 20 3 8 #"400+200i"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 20 3 8 #"300+258i"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 20 3 8 #"300+373i"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 1 #"k"
0 0 23 3 2 #" ("
0 0 14 3 13 #"make-shadow-4"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 3 #"kns"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-knot-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 3 #"kn1"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 3 #"kns"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 3 #"kn2"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 23 3 1 #" "
0 0 14 3 3 #"kns"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 19 #"set-knot-node-over!"
0 0 23 3 1 #" "
0 0 14 3 3 #"kn1"
0 0 23 3 2 #" ("
0 0 14 3 25 #"knot-node-first-path-node"
0 0 23 3 1 #" "
0 0 14 3 3 #"kn1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 19 #"set-knot-node-over!"
0 0 23 3 1 #" "
0 0 14 3 3 #"kn2"
0 0 23 3 2 #" ("
0 0 14 3 25 #"knot-node-first-path-node"
0 0 23 3 1 #" "
0 0 14 3 3 #"kn2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 15 #"check-not-false"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 21 #"knot-detect-pattern-2"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 1 #"k"
0 0 23 3 2 #" ("
0 0 14 3 15 #"make-shadow-7-4"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 3 #"kns"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-knot-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 3 #"kn0"
0 0 23 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 3 #"kns"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 3 #"kn2"
0 0 23 3 2 #" ("
0 0 14 3 5 #"findf"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 2 #"kn"
0 0 23 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 20 3 8 #"200+300i"
0 0 23 3 2 #" ("
0 0 14 3 11 #"knot-node-z"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 4 #"))) "
0 0 14 3 3 #"kns"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 19 #"set-knot-node-over!"
0 0 23 3 1 #" "
0 0 14 3 3 #"kn0"
0 0 23 3 2 #" ("
0 0 14 3 26 #"knot-node-second-path-node"
0 0 23 3 1 #" "
0 0 14 3 3 #"kn0"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 19 #"set-knot-node-over!"
0 0 23 3 1 #" "
0 0 14 3 3 #"kn2"
0 0 23 3 2 #" ("
0 0 14 3 25 #"knot-node-first-path-node"
0 0 23 3 1 #" "
0 0 14 3 3 #"kn2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 15 #"check-not-false"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 21 #"knot-detect-pattern-2"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 24 #";(define (all2lists x y)"
0 0 23 29 1 #"\n"
0 0 17 3 32 #";  (list (list x y) (list y x)))"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 3 #";;;"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"struct"
0 0 23 3 1 #" "
0 0 14 3 4 #"game"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"knot"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 7 #"player1"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 7 #"player2"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 14 #"current-player"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 6 #"solver"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 22 3 9 #"#:mutable"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 22 3 13 #"#:transparent"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"game-start"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"  (("
0 0 14 3 19 #"game-current-player"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 2 #") "
0 0 14 3 1 #"g"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"game-play"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 14 3 5 #"knode"
0 0 23 3 1 #" "
0 0 14 3 5 #"pnode"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 19 #"set-knot-node-over!"
0 0 23 3 1 #" "
0 0 14 3 5 #"knode"
0 0 23 3 1 #" "
0 0 14 3 5 #"pnode"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-game-over?"
0 0 23 3 2 #" ("
0 0 14 3 9 #"game-knot"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"      (("
0 0 14 3 11 #"game-solver"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 3 #") ("
0 0 14 3 9 #"game-knot"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 15 3 5 #"begin"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 27 #"change-game-current-player!"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        (("
0 0 14 3 19 #"game-current-player"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 2 #") "
0 0 14 3 1 #"g"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 27 #"change-game-current-player!"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 24 #"set-game-current-player!"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 23 3 2 #" ("
0 0 14 3 12 #"game-player1"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 3 #") ("
0 0 14 3 19 #"game-current-player"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 12 #"game-player2"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 12 #"game-player1"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 14 #"x-knotter-play"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 14 3 2 #"p?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 1 #"k"
0 0 23 3 2 #" ("
0 0 14 3 9 #"game-knot"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 4 #"sols"
0 0 23 3 2 #" ("
0 0 14 3 2 #"p?"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 14 3 4 #"sols"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"let1"
0 0 23 3 1 #" "
0 0 14 3 3 #"sol"
0 0 23 3 2 #" ("
0 0 14 3 15 #"random-list-ref"
0 0 23 3 1 #" "
0 0 14 3 4 #"sols"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 9 #"game-play"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 3 #"sol"
0 0 23 3 4 #") (("
0 0 14 3 4 #"cadr"
0 0 23 3 1 #" "
0 0 14 3 3 #"sol"
0 0 23 3 3 #") ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 3 #"sol"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 20 #"random-computer-play"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"knotter-play"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 14 #"x-knotter-play"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 14 3 14 #"knot-knotting?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 14 #"unknotter-play"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 14 #"x-knotter-play"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 14 3 16 #"knot-unknotting?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 18 #";without memoizing"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 4 #"time"
0 0 17 3 2 #" ("
0 0 17 3 14 #"knot-knotting?"
0 0 17 3 2 #" ("
0 0 17 3 18 #"make-shadow-7-4)))"
0 0 23 29 1 #"\n"
0 0 17 3 4 #";cpu"
0 0 17 3 1 #" "
0 0 17 3 5 #"time:"
0 0 17 3 9 #" 1576588 "
0 0 17 3 4 #"real"
0 0 17 3 1 #" "
0 0 17 3 5 #"time:"
0 0 17 3 1 #" "
0 0 17 3 7 #"1578695"
0 0 17 3 1 #" "
0 0 17 3 2 #"gc"
0 0 17 3 1 #" "
0 0 17 3 5 #"time:"
0 0 17 3 6 #" 68340"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 4 #"time"
0 0 17 3 2 #" ("
0 0 17 3 14 #"knot-knotting?"
0 0 17 3 2 #" ("
0 0 17 3 18 #"make-shadow-7-4)))"
0 0 23 29 1 #"\n"
0 0 17 3 4 #";cpu"
0 0 17 3 1 #" "
0 0 17 3 5 #"time:"
0 0 17 3 1 #" "
0 0 17 3 5 #"79824"
0 0 17 3 1 #" "
0 0 17 3 4 #"real"
0 0 17 3 1 #" "
0 0 17 3 5 #"time:"
0 0 17 3 1 #" "
0 0 17 3 5 #"79840"
0 0 17 3 1 #" "
0 0 17 3 2 #"gc"
0 0 17 3 1 #" "
0 0 17 3 5 #"time:"
0 0 17 3 5 #" 2092"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 15 #"define-memoized"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-xknotting?"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #" "
0 0 14 3 10 #"complement"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 3 #"kns"
0 0 23 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 2 #"kn"
0 0 23 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"none"
0 0 23 3 2 #" ("
0 0 14 3 14 #"knot-node-over"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 15 #"knot-knot-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 7 #"kn-f-ks"
0 0 23 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 6 #"kn-f-k"
0 0 23 3 3 #") ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 10 #"complement"
0 0 23 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 23 3 1 #" "
0 0 14 3 6 #"kn-f-k"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 14 3 10 #"append-map"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 2 #"ff"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                             ("
0 0 14 3 3 #"map"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 2 #"kn"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 37 #"                                    ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 1 #" "
0 0 14 3 2 #"ff"
0 0 23 3 2 #" ("
0 0 14 3 9 #"knot-play"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 1 #" "
0 0 14 3 2 #"ff"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                  "
0 0 14 3 3 #"kns"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 25 #"knot-node-first-path-node"
0 0 23 3 1 #" "
0 0 14 3 26 #"knot-node-second-path-node"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 7 #"kn-f-ks"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 20 3 2 #"#f"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 7 #"kn-f-ks"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 14 #"knot-knotting?"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-game-over?"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 7 #"knot-0?"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 15 #"knot-xknotting?"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #" "
0 0 14 3 16 #"knot-unknotting?"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 16 #"knot-unknotting?"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-game-over?"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 7 #"knot-0?"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 15 #"knot-xknotting?"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #" "
0 0 14 3 14 #"knot-knotting?"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                               "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 2 #"k0"
0 0 23 3 2 #" ("
0 0 14 3 19 #"make-shadow-trefoil"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 2 #"k1"
0 0 23 3 2 #" ("
0 0 14 3 9 #"knot-play"
0 0 23 3 1 #" "
0 0 14 3 2 #"k0"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-knot-nodes"
0 0 23 3 1 #" "
0 0 14 3 2 #"k0"
0 0 23 3 3 #")) "
0 0 14 3 25 #"knot-node-first-path-node"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 3 #"kn1"
0 0 23 3 2 #" ("
0 0 14 3 5 #"findf"
0 0 23 3 1 #" "
0 0 14 3 20 #"knot-node-none-over?"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-knot-nodes"
0 0 23 3 1 #" "
0 0 14 3 2 #"k1"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 2 #"k2"
0 0 23 3 2 #" ("
0 0 14 3 9 #"knot-play"
0 0 23 3 1 #" "
0 0 14 3 2 #"k1"
0 0 23 3 1 #" "
0 0 14 3 3 #"kn1"
0 0 23 3 1 #" "
0 0 14 3 25 #"knot-node-first-path-node"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 3 #"kn2"
0 0 23 3 2 #" ("
0 0 14 3 5 #"findf"
0 0 23 3 1 #" "
0 0 14 3 20 #"knot-node-none-over?"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-knot-nodes"
0 0 23 3 1 #" "
0 0 14 3 2 #"k2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 2 #"k3"
0 0 23 3 2 #" ("
0 0 14 3 9 #"knot-play"
0 0 23 3 1 #" "
0 0 14 3 2 #"k2"
0 0 23 3 1 #" "
0 0 14 3 3 #"kn2"
0 0 23 3 1 #" "
0 0 14 3 25 #"knot-node-first-path-node"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 20 3 2 #"#t"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 16 #"knot-unknotting?"
0 0 23 3 1 #" "
0 0 14 3 2 #"k3"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 20 3 2 #"#f"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 14 #"knot-knotting?"
0 0 23 3 1 #" "
0 0 14 3 2 #"k3"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 20 3 1 #"2"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 6 #"length"
0 0 23 3 2 #" ("
0 0 14 3 16 #"knot-unknotting?"
0 0 23 3 1 #" "
0 0 14 3 2 #"k2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 20 3 2 #"#f"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 14 #"knot-knotting?"
0 0 23 3 1 #" "
0 0 14 3 2 #"k0"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  )"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 18 #"dumb-computer-play"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 1 #"k"
0 0 23 3 2 #" ("
0 0 14 3 9 #"game-knot"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 5 #"knode"
0 0 23 3 2 #" ("
0 0 14 3 5 #"findf"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 2 #"kn"
0 0 23 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 23 3 2 #" ("
0 0 14 3 14 #"knot-node-over"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 4 #"none"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 15 #"knot-knot-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 4 #"when"
0 0 23 3 1 #" "
0 0 14 3 5 #"knode"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"game-play"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 14 3 5 #"knode"
0 0 23 3 2 #" ("
0 0 14 3 25 #"knot-node-first-path-node"
0 0 23 3 1 #" "
0 0 14 3 5 #"knode"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 20 #"random-computer-play"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 1 #"k"
0 0 23 3 2 #" ("
0 0 14 3 9 #"game-knot"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 5 #"knode"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 15 #"random-list-ref"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 6 #"filter"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 2 #"kn"
0 0 23 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 23 3 2 #" ("
0 0 14 3 14 #"knot-node-over"
0 0 23 3 1 #" "
0 0 14 3 2 #"kn"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 4 #"none"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 15 #"knot-knot-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 15 3 4 #"when"
0 0 23 3 1 #" "
0 0 14 3 5 #"knode"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"game-play"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 14 3 1 #"g"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 14 3 5 #"knode"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"       (("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #" ("
0 0 14 3 6 #"random"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 14 3 25 #"knot-node-first-path-node"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 14 3 26 #"knot-node-second-path-node"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 14 3 5 #"knode"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 14 #"2-players-play"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 23 3 3 #"())"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 7 #"re-play"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"eval"
0 0 23 3 2 #" ("
0 0 14 3 4 #"read"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 79
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;"
) 0 0 23 29 1 #"\n"
0 0 17 3 13 #";graphic view"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"draw-z-line"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 1 #" "
0 0 14 3 7 #"z-delta"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 7 #"z-start"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 1 #" "
0 0 14 3 7 #"z-delta"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 5 #"z-end"
0 0 23 3 4 #"   ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 1 #" "
0 0 14 3 7 #"z-delta"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 14 3 9 #"draw-line"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 9 #"real-part"
0 0 23 3 1 #" "
0 0 14 3 7 #"z-start"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 9 #"imag-part"
0 0 23 3 1 #" "
0 0 14 3 7 #"z-start"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 9 #"real-part"
0 0 23 3 1 #" "
0 0 14 3 5 #"z-end"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 9 #"imag-part"
0 0 23 3 1 #" "
0 0 14 3 5 #"z-end"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"draw-z-point"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 14 3 10 #"draw-point"
0 0 23 3 2 #" ("
0 0 14 3 9 #"real-part"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 3 #") ("
0 0 14 3 9 #"imag-part"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 10 #"kg-canvas%"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"class"
0 0 23 3 1 #" "
0 0 14 3 7 #"canvas%"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 4 #"init"
0 0 23 3 1 #" "
0 0 14 3 5 #"agame"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 9 #"super-new"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 5 #"field"
0 0 23 3 2 #" ["
0 0 14 3 4 #"game"
0 0 23 3 1 #" "
0 0 14 3 5 #"agame"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ["
0 0 14 3 5 #"mknot"
0 0 23 3 2 #" ("
0 0 14 3 9 #"game-knot"
0 0 23 3 1 #" "
0 0 14 3 5 #"agame"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ["
0 0 14 3 5 #"pnode"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 3 #"()]"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ["
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 4 #"()])"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 15 #"define/override"
0 0 23 3 2 #" ("
0 0 14 3 8 #"on-paint"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 2 #"dc"
0 0 23 3 2 #" ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 4 #"this"
0 0 23 3 1 #" "
0 0 14 3 6 #"get-dc"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 15 3 4 #"when"
0 0 23 3 2 #" ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 5 #"mknot"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 9 #"knot-draw"
0 0 23 3 1 #" "
0 0 14 3 5 #"mknot"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 15 3 4 #"when"
0 0 23 3 2 #" ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 5 #"pnode"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 5 #"brush"
0 0 23 3 2 #" ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 14 3 9 #"get-brush"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 3 #"pen"
0 0 23 3 2 #" ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 14 3 7 #"get-pen"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 1 #"z"
0 0 23 3 2 #" ("
0 0 14 3 11 #"path-node-z"
0 0 23 3 1 #" "
0 0 14 3 5 #"pnode"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 7 #"z-angle"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-polar"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #" ("
0 0 14 3 15 #"path-node-angle"
0 0 23 3 1 #" "
0 0 14 3 5 #"pnode"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 14 3 7 #"set-pen"
0 0 23 3 1 #" "
0 0 19 3 8 #"\"yellow\""
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 11 #"draw-z-line"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 14 3 7 #"z-angle"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 14 3 7 #"set-pen"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 11 #"draw-z-line"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 14 3 7 #"z-angle"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 14 3 9 #"set-brush"
0 0 23 3 1 #" "
0 0 14 3 5 #"brush"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 14 3 7 #"set-pen"
0 0 23 3 1 #" "
0 0 14 3 3 #"pen"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 15 3 4 #"when"
0 0 23 3 2 #" ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 6 #"circle"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 6 #"center"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 6 #"circle"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 6 #"radius"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 23 3 1 #" "
0 0 14 3 6 #"circle"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 5 #"w/pen"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 14 3 12 #"draw-ellipse"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 9 #"real-part"
0 0 23 3 1 #" "
0 0 14 3 6 #"center"
0 0 23 3 3 #") ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 6 #"radius"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 9 #"imag-part"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 6 #"circle"
0 0 23 3 4 #")) ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 6 #"radius"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                         "
0 0 14 3 6 #"radius"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                         "
0 0 14 3 6 #"radius"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 15 #"define/override"
0 0 23 3 2 #" ("
0 0 14 3 8 #"on-event"
0 0 23 3 1 #" "
0 0 14 3 5 #"event"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 10 #"event-type"
0 0 23 3 2 #" ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 5 #"event"
0 0 23 3 1 #" "
0 0 14 3 14 #"get-event-type"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 15 3 4 #"case"
0 0 23 3 1 #" "
0 0 14 3 10 #"event-type"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ["
0 0 20 3 1 #"'"
0 0 14 3 6 #"motion"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 15 3 4 #"when"
0 0 23 3 2 #" ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 5 #"mknot"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 1 #"x"
0 0 23 3 2 #" ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 5 #"event"
0 0 23 3 1 #" "
0 0 14 3 5 #"get-x"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 1 #"y"
0 0 23 3 2 #" ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 5 #"event"
0 0 23 3 1 #" "
0 0 14 3 5 #"get-y"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 1 #"z"
0 0 23 3 2 #" ("
0 0 14 3 16 #"make-rectangular"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 5 #"knode"
0 0 23 3 2 #" ("
0 0 14 3 17 #"knot-nearest-node"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 5 #"mknot"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 7 #"knode-z"
0 0 23 3 2 #" ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 5 #"knode"
0 0 23 3 4 #")) ("
0 0 14 3 11 #"knot-node-z"
0 0 23 3 1 #" "
0 0 14 3 5 #"knode"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 23 3 5 #"())))"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 7 #"knode-z"
0 0 23 3 4 #")) ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 7 #"knode-z"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 4 #"set!"
0 0 23 3 1 #" "
0 0 14 3 5 #"pnode"
0 0 23 3 2 #" ("
0 0 14 3 25 #"knot-node-angle-path-node"
0 0 23 3 1 #" "
0 0 14 3 5 #"knode"
0 0 23 3 2 #" ("
0 0 14 3 5 #"angle"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 1 #" "
0 0 14 3 7 #"knode-z"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 4 #"set!"
0 0 23 3 1 #" "
0 0 14 3 5 #"pnode"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 4 #"()))"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 4 #"this"
0 0 23 3 1 #" "
0 0 14 3 7 #"refresh"
0 0 23 3 4 #")))]"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"          [("
0 0 14 3 7 #"left-up"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 15 3 4 #"when"
0 0 23 3 2 #" ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 5 #"pnode"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 9 #"game-play"
0 0 23 3 1 #" "
0 0 14 3 4 #"game"
0 0 23 3 2 #" ("
0 0 14 3 16 #"path-node-parent"
0 0 23 3 1 #" "
0 0 14 3 5 #"pnode"
0 0 23 3 2 #") "
0 0 14 3 5 #"pnode"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 41 #";             (if (knot-game-over? mknot)"
0 0 23 29 1 #"\n"
0 0 17 3 35 #";                 (send this solve)"
0 0 23 29 1 #"\n"
0 0 17 3 43 #";                 (m2nd-player-play mknot))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 4 #"set!"
0 0 23 3 1 #" "
0 0 14 3 5 #"pnode"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 3 #"())"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 4 #"this"
0 0 23 3 1 #" "
0 0 14 3 7 #"refresh"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"             )]"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"          )))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 13 #"define/public"
0 0 23 3 2 #" ("
0 0 14 3 5 #"blink"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 4 #"let1"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 2 #" ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 4 #"this"
0 0 23 3 1 #" "
0 0 14 3 6 #"get-dc"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 5 #"sleep"
0 0 23 3 1 #" "
0 0 20 3 3 #"0.5"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 4 #"this"
0 0 23 3 1 #" "
0 0 14 3 5 #"flush"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 14 3 5 #"clear"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 9 #"knot-draw"
0 0 23 3 1 #" "
0 0 14 3 5 #"mknot"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 5 #"sleep"
0 0 23 3 1 #" "
0 0 20 3 3 #"0.5"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 4 #"this"
0 0 23 3 1 #" "
0 0 14 3 5 #"flush"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 12 #")           "
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 5 #"sleep"
0 0 23 3 1 #" "
0 0 20 3 3 #"0.5"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 13 #"define/public"
0 0 23 3 2 #" ("
0 0 14 3 5 #"solve"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 4 #"set!"
0 0 23 3 1 #" "
0 0 14 3 5 #"pnode"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 3 #"())"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 4 #"this"
0 0 23 3 1 #" "
0 0 14 3 7 #"refresh"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 5 #"yield"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 2 #"p2"
0 0 23 3 2 #" ("
0 0 14 3 21 #"knot-detect-pattern-2"
0 0 23 3 1 #" "
0 0 14 3 5 #"mknot"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 2 #"p1"
0 0 23 3 2 #" ("
0 0 14 3 16 #"knot-detect-loop"
0 0 23 3 1 #" "
0 0 14 3 5 #"mknot"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" (("
0 0 14 3 7 #"knot-8?"
0 0 23 3 1 #" "
0 0 14 3 5 #"mknot"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 4 #"this"
0 0 23 3 1 #" "
0 0 14 3 5 #"blink"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 15 3 2 #"\316\273"
0 0 23 3 2 #" ("
0 0 14 3 2 #"dc"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 5 #"w/pen"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 19 3 8 #"\"yellow\""
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 29 1 #"\n"
0 0 23 3 29 #"                            ("
0 0 14 3 12 #"draw-z-point"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 2 #" ("
0 0 14 3 11 #"knot-node-z"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-knot-nodes"
0 0 23 3 1 #" "
0 0 14 3 5 #"mknot"
0 0 23 3 7 #")))))))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 4 #"set!"
0 0 23 3 1 #" "
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 11 #"knot-node-z"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-knot-nodes"
0 0 23 3 1 #" "
0 0 14 3 5 #"mknot"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 1 #"/"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 32 #"path-node-control-radius-average"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                ("
0 0 14 3 3 #"car"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-path-nodes"
0 0 23 3 1 #" "
0 0 14 3 5 #"mknot"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                               ("
0 0 14 3 32 #"path-node-control-radius-average"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                ("
0 0 14 3 4 #"cadr"
0 0 23 3 2 #" ("
0 0 14 3 15 #"knot-path-nodes"
0 0 23 3 1 #" "
0 0 14 3 5 #"mknot"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                            "
0 0 20 3 1 #"2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 4 #"set!"
0 0 23 3 1 #" "
0 0 14 3 5 #"mknot"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 3 #"())"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 4 #"this"
0 0 23 3 1 #" "
0 0 14 3 7 #"refresh"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 2 #"p1"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 4 #"this"
0 0 23 3 1 #" "
0 0 14 3 5 #"blink"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 15 3 2 #"\316\273"
0 0 23 3 2 #" ("
0 0 14 3 2 #"dc"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 5 #"w/pen"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 19 3 8 #"\"yellow\""
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 29 1 #"\n"
0 0 23 3 29 #"                            ("
0 0 14 3 12 #"draw-z-point"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 2 #" ("
0 0 14 3 11 #"path-node-z"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 4 #"set!"
0 0 23 3 1 #" "
0 0 14 3 5 #"mknot"
0 0 23 3 2 #" ("
0 0 14 3 19 #"knot-remove-pattern"
0 0 23 3 1 #" "
0 0 14 3 5 #"mknot"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 4 #"this"
0 0 23 3 1 #" "
0 0 14 3 7 #"refresh"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 4 #"this"
0 0 23 3 1 #" "
0 0 14 3 5 #"solve"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 2 #"p2"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 4 #"this"
0 0 23 3 1 #" "
0 0 14 3 5 #"blink"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 15 3 2 #"\316\273"
0 0 23 3 2 #" ("
0 0 14 3 2 #"dc"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 3 #"kn1"
0 0 23 3 2 #" ("
0 0 14 3 16 #"path-node-parent"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 2 #"p2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 3 #"kn2"
0 0 23 3 2 #" ("
0 0 14 3 16 #"path-node-parent"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 23 3 1 #" "
0 0 14 3 2 #"p2"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 5 #"w/pen"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 1 #" "
0 0 19 3 8 #"\"yellow\""
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                              ("
0 0 14 3 12 #"draw-z-point"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 2 #" ("
0 0 14 3 11 #"knot-node-z"
0 0 23 3 1 #" "
0 0 14 3 3 #"kn1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                              ("
0 0 14 3 12 #"draw-z-point"
0 0 23 3 1 #" "
0 0 14 3 2 #"dc"
0 0 23 3 2 #" ("
0 0 14 3 11 #"knot-node-z"
0 0 23 3 1 #" "
0 0 14 3 3 #"kn2"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 4 #"set!"
0 0 23 3 1 #" "
0 0 14 3 5 #"mknot"
0 0 23 3 2 #" ("
0 0 14 3 19 #"knot-remove-pattern"
0 0 23 3 1 #" "
0 0 14 3 5 #"mknot"
0 0 23 3 1 #" "
0 0 14 3 2 #"p2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 4 #"this"
0 0 23 3 1 #" "
0 0 14 3 7 #"refresh"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 4 #"this"
0 0 23 3 1 #" "
0 0 14 3 5 #"solve"
0 0 23 3 11 #")))))      "
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    ))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 15 #"declare-bundle!"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 4 #"knot"
0 0 23 3 1 #" "
0 0 14 3 2 #"en"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 23 3 2 #"(("
0 0 14 3 4 #"Game"
0 0 23 3 1 #" "
0 0 27 3 1 #"."
0 0 23 3 1 #" "
0 0 19 3 6 #"\"Game\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 8 #"New_game"
0 0 23 3 1 #" "
0 0 27 3 1 #"."
0 0 23 3 1 #" "
0 0 19 3 10 #"\"New game\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 8 #"Language"
0 0 23 3 1 #" "
0 0 27 3 1 #"."
0 0 23 3 1 #" "
0 0 19 3 10 #"\"Language\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 7 #"English"
0 0 23 3 1 #" "
0 0 27 3 1 #"."
0 0 23 3 1 #" "
0 0 19 3 9 #"\"English\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 6 #"French"
0 0 23 3 1 #" "
0 0 27 3 1 #"."
0 0 23 3 1 #" "
0 0 19 3 8 #"\"French\""
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 15 #"declare-bundle!"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 4 #"knot"
0 0 23 3 1 #" "
0 0 14 3 2 #"fr"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 23 3 2 #"(("
0 0 14 3 4 #"Game"
0 0 23 3 1 #" "
0 0 27 3 1 #"."
0 0 23 3 1 #" "
0 0 19 3 5 #"\"Jeu\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 8 #"New_game"
0 0 23 3 1 #" "
0 0 27 3 1 #"."
0 0 23 3 1 #" "
0 0 19 3 17 #"\"Nouvelle partie\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 8 #"Language"
0 0 23 3 1 #" "
0 0 27 3 1 #"."
0 0 23 3 1 #" "
0 0 19 3 8 #"\"Langue\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 7 #"English"
0 0 23 3 1 #" "
0 0 27 3 1 #"."
0 0 23 3 1 #" "
0 0 19 3 9 #"\"Anglais\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 6 #"French"
0 0 23 3 1 #" "
0 0 27 3 1 #"."
0 0 23 3 1 #" "
0 0 19 3 11 #"\"Fran\303\247ais\""
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 5 #"start"
0 0 23 3 1 #" "
0 0 14 3 7 #"player1"
0 0 23 3 1 #" "
0 0 14 3 7 #"player2"
0 0 23 3 1 #" "
0 0 14 3 11 #"make-shadow"
0 0 23 3 1 #" "
0 0 14 3 4 #"lang"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 16 #"current-language"
0 0 23 3 1 #" "
0 0 14 3 4 #"lang"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 1 #"g"
0 0 23 3 2 #" ("
0 0 14 3 4 #"game"
0 0 23 3 2 #" ("
0 0 14 3 11 #"make-shadow"
0 0 23 3 2 #") "
0 0 14 3 7 #"player1"
0 0 23 3 1 #" "
0 0 14 3 7 #"player2"
0 0 23 3 1 #" "
0 0 14 3 7 #"player1"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 4 #"()))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 5 #"frame"
0 0 23 3 2 #" ("
0 0 14 3 3 #"new"
0 0 23 3 1 #" "
0 0 14 3 6 #"frame%"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ["
0 0 14 3 5 #"label"
0 0 23 3 1 #" "
0 0 19 3 24 #"\"To knot or not to knot\""
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ["
0 0 14 3 5 #"width"
0 0 23 3 1 #" "
0 0 20 3 3 #"600"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ["
0 0 14 3 6 #"height"
0 0 23 3 1 #" "
0 0 20 3 3 #"450"
0 0 23 3 3 #"]))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 8 #"menu-bar"
0 0 23 3 2 #" ("
0 0 14 3 3 #"new"
0 0 23 3 1 #" "
0 0 14 3 9 #"menu-bar%"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 6 #"parent"
0 0 23 3 1 #" "
0 0 14 3 5 #"frame"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 6 #"canvas"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 3 #"new"
0 0 23 3 1 #" "
0 0 14 3 10 #"kg-canvas%"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ["
0 0 14 3 6 #"parent"
0 0 23 3 1 #" "
0 0 14 3 5 #"frame"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ["
0 0 14 3 5 #"agame"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 3 #"]))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 9 #"menu-game"
0 0 23 3 2 #" ("
0 0 14 3 3 #"new"
0 0 23 3 1 #" "
0 0 14 3 5 #"menu%"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 5 #"label"
0 0 23 3 2 #" ("
0 0 14 3 18 #"localized-template"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"knot"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"Game"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 6 #"parent"
0 0 23 3 1 #" "
0 0 14 3 8 #"menu-bar"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 13 #"item-new-game"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 3 #"new"
0 0 23 3 1 #" "
0 0 14 3 10 #"menu-item%"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ["
0 0 14 3 5 #"label"
0 0 23 3 2 #" ("
0 0 14 3 18 #"localized-template"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"knot"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"New_game"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ["
0 0 14 3 6 #"parent"
0 0 23 3 1 #" "
0 0 14 3 9 #"menu-game"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ["
0 0 14 3 8 #"callback"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 2 #"mi"
0 0 23 3 1 #" "
0 0 14 3 2 #"ce"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 4 #"let1"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 4 #"game"
0 0 23 3 2 #" ("
0 0 14 3 11 #"make-shadow"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                                "
0 0 14 3 7 #"player1"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                                "
0 0 14 3 7 #"player2"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                                "
0 0 14 3 7 #"player1"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"k"
0 0 23 3 3 #") ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 6 #"canvas"
0 0 23 3 1 #" "
0 0 14 3 5 #"solve"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                        (("
0 0 14 3 19 #"class-field-mutator"
0 0 23 3 1 #" "
0 0 14 3 10 #"kg-canvas%"
0 0 23 3 1 #" "
0 0 14 3 6 #"circle"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                         "
0 0 14 3 6 #"canvas"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 3 #"())"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                        (("
0 0 14 3 19 #"class-field-mutator"
0 0 23 3 1 #" "
0 0 14 3 10 #"kg-canvas%"
0 0 23 3 1 #" "
0 0 14 3 4 #"game"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                         "
0 0 14 3 6 #"canvas"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                        (("
0 0 14 3 19 #"class-field-mutator"
0 0 23 3 1 #" "
0 0 14 3 10 #"kg-canvas%"
0 0 23 3 1 #" "
0 0 14 3 5 #"mknot"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                         "
0 0 14 3 6 #"canvas"
0 0 23 3 2 #" ("
0 0 14 3 9 #"game-knot"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 6 #"canvas"
0 0 23 3 1 #" "
0 0 14 3 7 #"refresh"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 10 #"game-start"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                        ))])))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 16 #"set-game-solver!"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"k"
0 0 23 3 3 #") ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 6 #"canvas"
0 0 23 3 1 #" "
0 0 14 3 5 #"solve"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"game-start"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 4 #"send"
0 0 23 3 1 #" "
0 0 14 3 5 #"frame"
0 0 23 3 1 #" "
0 0 14 3 4 #"show"
0 0 23 3 1 #" "
0 0 20 3 2 #"#t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 14 3 5 #"frame"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"frame"
0 0 23 3 2 #" ("
0 0 14 3 5 #"start"
0 0 23 3 1 #" "
0 0 14 3 14 #"2-players-play"
0 0 23 3 1 #" "
0 0 14 3 14 #"2-players-play"
0 0 23 3 1 #" "
0 0 14 3 15 #"make-shadow-7-4"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"fr"
0 0 23 3 2 #"))"
0           0
